AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 instance with Amazon Linux 2 and Docker'

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: 1
    AllowedPattern: .+
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  ApiKey:
    Description: UUID for the FastAPI service API key
    Type: String
    AllowedPattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
    ConstraintDescription: must be a valid UUID.

  EndpointName:
    Description: Name of the Sagemaker endpoint (not the URL)
    Type: String
    MinLength: 1
    AllowedPattern: .+
    ConstraintDescription: must not be empty.

  InstanceType:
    Description: EC2 instance type
    Default: t3.micro
    Type: String
    AllowedValues: [t3.micro, t3.small, t3.medium]
    ConstraintDescription: must be a valid EC2 instance type.

  InstanceName:
    Description: Name tag for the EC2 instance
    Default: sagemaker-proxy-instance
    Type: String
    MinLength: 1
    AllowedPattern: .+
    ConstraintDescription: must not be empty.

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  VpcId:
    Description: VPC to launch the instance into
    Type: AWS::EC2::VPC::Id
    AllowedPattern: ^vpc-[a-z0-9]+$
    ConstraintDescription: Must be a valid VPC ID starting with 'vpc-'.


  SubnetId:
    Description: public subnet to launch the instance into
    Type: AWS::EC2::Subnet::Id
    AllowedPattern: ^subnet-[a-z0-9]+$
    ConstraintDescription: Must be a valid subnet ID starting with 'subnet-'.

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-x86_64'
    ConstraintDescription: Must be a valid AMI ID.

Resources:
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref 'InstanceType'
        ImageId: !Ref 'LatestAmiId'
        KeyName: !Ref 'KeyName'
        SecurityGroupIds:
          - !Ref 'InstanceSecurityGroup'
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              # Update all packages
              yum update -y
              # Install Docker and git
              yum install docker git -y
              # Start Docker service
              systemctl start docker
              # Enable Docker to start on boot
              systemctl enable docker
              # Add ec2-user to docker group
              # Allow ec2-user to access the Docker socket
              usermod -a -G docker ec2-user
              chown ec2-user:docker /var/run/docker.sock
              # Run the Docker container
              docker run -d -e API_KEY=${ApiKey} -e ENDPOINT_NAME=${EndpointName} -e REGION_NAME=${AWS::Region} -p 8000:8000 juliensimon/sagemaker-proxy:latest

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      SubnetId: !Ref 'SubnetId'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      Tags:
        - Key: Name
          Value: !Ref 'InstanceName'

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access, FastAPI access on port 8000, and all outbound traffic
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles: [!Ref 'EC2InstanceRole']

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'
    Export:
      Name: !Sub "${AWS::StackName}-InstanceId"
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
